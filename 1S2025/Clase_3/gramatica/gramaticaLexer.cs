//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from gramatica.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class gramaticaLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, NEWLINE=8, INT=9, 
		DECIMAL=10, CADENA=11;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "NEWLINE", "INT", 
		"DECIMAL", "CADENA"
	};


	public gramaticaLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public gramaticaLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'fmt.println'", "'('", "')'", "'*'", "'/'", "'+'", "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "NEWLINE", "INT", "DECIMAL", 
		"CADENA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "gramatica.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static gramaticaLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,11,81,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
		1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,4,7,49,
		8,7,11,7,12,7,50,1,7,1,7,1,8,4,8,56,8,8,11,8,12,8,57,1,9,4,9,61,8,9,11,
		9,12,9,62,1,9,1,9,4,9,67,8,9,11,9,12,9,68,1,10,1,10,1,10,1,10,5,10,75,
		8,10,10,10,12,10,78,9,10,1,10,1,10,0,0,11,1,1,3,2,5,3,7,4,9,5,11,6,13,
		7,15,8,17,9,19,10,21,11,1,0,12,2,0,70,70,102,102,2,0,77,77,109,109,2,0,
		84,84,116,116,2,0,80,80,112,112,2,0,82,82,114,114,2,0,73,73,105,105,2,
		0,78,78,110,110,2,0,76,76,108,108,3,0,9,10,13,13,32,32,1,0,48,57,2,0,34,
		34,39,39,3,0,10,10,13,13,34,34,86,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
		0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
		0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,1,23,1,0,0,0,3,35,1,0,0,0,5,37,1,0,0,0,
		7,39,1,0,0,0,9,41,1,0,0,0,11,43,1,0,0,0,13,45,1,0,0,0,15,48,1,0,0,0,17,
		55,1,0,0,0,19,60,1,0,0,0,21,70,1,0,0,0,23,24,7,0,0,0,24,25,7,1,0,0,25,
		26,7,2,0,0,26,27,5,46,0,0,27,28,7,3,0,0,28,29,7,4,0,0,29,30,7,5,0,0,30,
		31,7,6,0,0,31,32,7,2,0,0,32,33,7,7,0,0,33,34,7,6,0,0,34,2,1,0,0,0,35,36,
		5,40,0,0,36,4,1,0,0,0,37,38,5,41,0,0,38,6,1,0,0,0,39,40,5,42,0,0,40,8,
		1,0,0,0,41,42,5,47,0,0,42,10,1,0,0,0,43,44,5,43,0,0,44,12,1,0,0,0,45,46,
		5,45,0,0,46,14,1,0,0,0,47,49,7,8,0,0,48,47,1,0,0,0,49,50,1,0,0,0,50,48,
		1,0,0,0,50,51,1,0,0,0,51,52,1,0,0,0,52,53,6,7,0,0,53,16,1,0,0,0,54,56,
		7,9,0,0,55,54,1,0,0,0,56,57,1,0,0,0,57,55,1,0,0,0,57,58,1,0,0,0,58,18,
		1,0,0,0,59,61,7,9,0,0,60,59,1,0,0,0,61,62,1,0,0,0,62,60,1,0,0,0,62,63,
		1,0,0,0,63,64,1,0,0,0,64,66,5,46,0,0,65,67,7,9,0,0,66,65,1,0,0,0,67,68,
		1,0,0,0,68,66,1,0,0,0,68,69,1,0,0,0,69,20,1,0,0,0,70,76,7,10,0,0,71,75,
		8,11,0,0,72,73,5,34,0,0,73,75,5,34,0,0,74,71,1,0,0,0,74,72,1,0,0,0,75,
		78,1,0,0,0,76,74,1,0,0,0,76,77,1,0,0,0,77,79,1,0,0,0,78,76,1,0,0,0,79,
		80,7,10,0,0,80,22,1,0,0,0,7,0,50,57,62,68,74,76,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
